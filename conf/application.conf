# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}

## Akka
# https://www.playframework.com/documentation/latest/ScalaAkka#Configuration
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
# Play uses Akka internally and exposes Akka Streams and actors in Websockets and
# other streaming HTTP responses.
akka {
  # "akka.log-config-on-start" is extraordinarly useful because it log the complete
  # configuration at INFO level, including defaults and overrides, so it s worth
  # putting at the very top.
  #
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #
  #log-config-on-start = true
}

## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
# Control which modules are loaded when Play starts.  Note that modules are
# the replacement for "GlobalSettings", which are deprecated in 2.5.x.
# Please see https://www.playframework.com/documentation/latest/GlobalSettings
# for more information.
#
# You can also extend Play functionality by using one of the publically available
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to disable, you can list them here.
  #enabled += my.application.Module

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
}

## IDE
# https://www.playframework.com/documentation/latest/IDE
# ~~~~~
# Depending on your IDE, you can add a hyperlink for errors that will jump you
# directly to the code location in the IDE in dev mode. The following line makes 
# use of the IntelliJ IDEA REST interface: 
#play.editor=http://localhost:63342/api/file/?file=%s&line=%s 

## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
  # The application languages
  langs = [ "en" ]

  # Whether the language cookie should be secure or not
  #langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  #langCookieHttpOnly = true
}

## Play HTTP settings
# ~~~~~
play.http {
  ## Router
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # Define the Router object to use for this application.
  # This router will be looked up first when the application is starting up,
  # so make sure this is the entry point.
  # Furthermore, it's assumed your route file is named properly.
  # So for an application router like `my.application.Router`,
  # you may need to define a router file `conf/my.application.routes`.
  # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
  #router = my.application.Router

  ## Action Creator
  # https://www.playframework.com/documentation/latest/JavaActionCreator
  # ~~~~~
  #actionCreator = null

  ## ErrorHandler
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # If null, will attempt to load a class called ErrorHandler in the root package,
  #errorHandler = null

  ## Filters
  # https://www.playframework.com/documentation/latest/ScalaHttpFilters
  # https://www.playframework.com/documentation/latest/JavaHttpFilters
  # ~~~~~
  # Filters run code on every request. They can be used to perform
  # common logic for all your actions, e.g. adding common headers.
  # Defaults to "Filters" in the root package (aka "apps" folder)
  # Alternatively you can explicitly register a class here.
  #filters = my.application.Filters

  ## Session & Flash
  # https://www.playframework.com/documentation/latest/JavaSessionFlash
  # https://www.playframework.com/documentation/latest/ScalaSessionFlash
  # ~~~~~
  session {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    #maxAge = 300

    # Sets the domain on the session cookie.
    #domain = "example.com"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true
  }
}

## Netty Provider
# https://www.playframework.com/documentation/latest/SettingsNetty
# ~~~~~
play.server.netty {
  # Whether the Netty wire should be logged
  #log.wire = true

  # If you run Play on Linux, you can use Netty's native socket transport
  # for higher performance with less garbage.
  #transport = "native"
}

## WS (HTTP Client)
# https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
# ~~~~~
# The HTTP client primarily used for REST APIs.  The default client can be
# configured directly, but you can also create different client instances
# with customized settings. You must enable this by adding to build.sbt:
#
# libraryDependencies += ws // or javaWs if using java
#
play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
  }
}

## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
# libraryDependencies += cache
#
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

## Filters
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.  You must enable this by adding to build.sbt:
#
# libraryDependencies += filters
#
play.filters {
  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    #allowed = [".example.com", "localhost:9000"]
  }
}

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  #config = "db"
  #default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
  #default.driver = org.h2.Driver
  #default.url = "jdbc:h2:mem:play"
  #default.username = sa
  #default.password = ""

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}


# This is the main configuration file for the application.
# https://github.com/typesafehub/config
# ~~~~~


# PRODUCTS
# ~~~~~

# Product attribute list that is displayed for a specific product variant (this does not allow to select different
# product variants, please check soft/hard selectable attributes for that purpose). Enter a list of the attribute keys.
productData.displayedAttributes = ["colorFreeDefinition", "designer"]
productData.displayedAttributes = ${?DISPLAYED_ATTRIBUTES}

# List here those product attributes that enable selecting a different product variant.
# In particular, those attributes that require re-loading the page to display the selected variant,
# e.g. if you select a different color you may want to show different pictures, description, etc.
# Enter a list of the attribute names.
productData.hardSelectableAttributes = ["color"]
productData.hardSelectableAttributes = ${?HARD_SELECTABLE_ATTRIBUTES}

# List here those product attributes that enable selecting a different product variant.
# In particular, those attributes that DO NOT require re-loading the page to display the selected variant, e.g. size.
# Enter a list of the attribute names.
productData.softSelectableAttributes = ["size"]
productData.softSelectableAttributes = ${?SOFT_SELECTABLE_ATTRIBUTES}


# CATEGORIES
# ~~~~~

# The sales category in your project. Enter the category external ID.
common.saleCategoryExternalId = "6"
common.saleCategoryExternalId = ${?SALES_CATEGORY}

# The category containing the new products in your project. Enter the category external ID.
common.newCategoryExternalId = "1"
common.newCategoryExternalId = ${?NEW_CATEGORY}


# SUGGESTIONS
# ~~~~~

# The categories to which the products shown in the home page suggestions belong. Enter a list of the category external IDs.
homeSuggestions.externalId = ["29", "37", "22", "28"]
homeSuggestions.externalId = ${?HOME_SUGGESTIONS_CATEGORIES}

# The amount of products displayed in the home page suggestions.
homeSuggestions.count = 4
homeSuggestions.count = ${?HOME_SUGGESTIONS_SIZE}

# The amount of products displayed for a product's suggestions.
productSuggestions.count = 4
productSuggestions.count = ${?PRODUCT_SUGGESTIONS_SIZE}



# PRODUCT SEARCH
# ~~~~~

# Field in the URL query string containing the searched term.
pop.searchTerm.key = "q"
pop.searchTerm.key = ${?SEARCH_PRODUCTS_FIELD}

# Field in the URL query string containing the page.
pop.pagination.key = "page"
pop.pagination.key = ${?PAGINATION_FIELD}

# The maximum amount of pages to be displayed in the pagination, which the customer can use to navigate directly.
pop.pagination.displayedPages = 6
pop.pagination.displayedPages = ${?PAGINATION_DISPLAYED_PAGES}

# Field in the URL query string containing the amount of products per page.
pop.productsPerPage.key = "ppp"
pop.productsPerPage.key = ${?PRODUCTS_PER_PAGE_FIELD}

# Available options to select the amount of products per page. Consist of:
# - value: identifier of this option, e.g. used in the URL query string
# - label: the name to be displayed, it can be either a regular text or a i18n message key
# - amount: products per page of this option, the allowed range goes from 0 to 500
pop.productsPerPage.options = [
  {
    "value": "24",
    "label": "24",
    "amount": 24
  },
  {
    "value": "48",
    "label": "48",
    "amount": 48
  }
]
pop.productsPerPage.options = ${?PRODUCTS_PER_PAGE_OPTIONS}

# The default selected amount of products per page.
pop.productsPerPage.default = 24
pop.productsPerPage.default = ${?PRODUCTS_PER_PAGE_DEFAULT}

# Field in the URL query string containing the sorting criteria.
pop.sortProducts.key = "sort"
pop.sortProducts.key = ${?SORT_PRODUCTS_FIELD}

# Available options to sort products. Consist of:
# - value: identifier of this sort option, e.g. used in the URL query string
# - label: the name to be displayed, it can be either a regular text or a i18n message key
# - expr: list (for multisort) of sort expressions applied for that option, in CTP format (http://dev.commercetools.com/http-api-projects-products-search.html#search-sorting)
#     - use {{locale}} inside the expression to replace it for the user's language (e.g. "name.{{locale}}" would be transformed into "name.en" when the user has English selected)
# - default: whether this option should be default (multiple default options will simply join their expressions in the given order)
pop.sortProducts.options = [
  {
    "value": "new",
    "label": "catalog:sortSelector.new",
    "expr": ["createdAt desc"],
    "default": true
  },
  {
    "value": "price-asc",
    "label": "catalog:sortSelector.priceAsc",
    "expr": ["price asc", "createdAt desc"]
  },
  {
    "value": "price-desc",
    "label": "catalog:sortSelector.priceDesc",
    "expr": ["price desc", "createdAt desc"]
  }
]
pop.sortProducts.options = ${?SORT_OPTIONS}

# Available facets for products. Consist of:
# - type: visual type of the facet, default available options are:
#     - list: a simple list with facet options
#     - columns_list: a two columns list with facet options
#     - category_tree: a category tree (use along with the category_tree mapper)
# - key: the field in the URL query string containing this facet criteria
# - label: the name to be displayed, it can be either a regular text or a i18n message key
# - expr: attribute path of the facet expression applied, in CTP format (http://dev.commercetools.com/http-api-projects-products-search.html#search-facet-term-query-parameter)
#     - use {{locale}} inside the expression to replace it for the user's language (e.g. "name.{{locale}}" would be transformed into "name.en" when the user has English selected)
# - count: whether the product count is shown or hidden
# - threshold: minimum amount of facet options required to display the facet, otherwise the facet is hidden
# - limit: maximum amount of facet options displayed
# - multiSelect: whether you can select multiple options from the facet to filter by or just one per request
# - matchingAll: whether the filtered products should match all selected facet options (matches all) or just at least one (matches any)
# - mapper: transforms the facet options somehow, default available types are:
#    - custom_sorted: it sorts the options according to a given list of values, missing values are appended
#    - alphabetically_sorted: it sorts the options in alphabetical order
#    - category_tree: it structures the categories into a category tree (use only with categories!)
pop.facets = [
  {
    "key": "productType",
    "type": "category_tree",
    "label": "catalog:filters.productType",
    "expr": "variants.categories.id",
    "count": false,
    "multiSelect": false,
    "mapper": {
      "type": "category_tree"
    }
  },
  {
    "key": "size",
    "type": "columns_list",
    "label": "catalog:filters.size",
    "expr": "variants.attributes.commonSize.label",
    "count": false,
    "threshold": 2,
    "mapper": {
      "type": "custom_sorted",
      "values": ["one Size","XXS","XS","S","M","L","XL","XXL","XXXL","34","34.5","35","35.5","36","36.5","37","37.5",
        "38","38.5","39","39.5","40","40.5","41","41.5","42","42.5","43","43.5","44","44.5","45","45.5","46","46.5",
        "47","47.5","70","75","80","85","90","95","100","105","110","115","120"]
    }
  },
  {
    "key": "color",
    "type": "columns_list",
    "label": "catalog:filters.color",
    "expr": "variants.attributes.color.label.{{locale}}",
    "count": false,
    "threshold": 2,
    "mapper": {
      "type": "alphabetically_sorted"
    }
  },
  {
    "key": "brands",
    "type": "list",
    "label": "catalog:filters.brand",
    "expr": "variants.attributes.designer.label",
    "count": false,
    "threshold": 2
  }
]
pop.facets = ${?FACETS}


# CHECKOUT
# ~~~~~

form.titles = [
  "main:form.personTitles.mr",
  "main:form.personTitles.mrs",
  "main:form.personTitles.ms",
  "main:form.personTitles.dr"
]

checkout.customerServiceNumber = "+49 899982996-0"


# LOCALIZATION
# ~~~~~

# LEAVE COMMENTED IF YOU WANT THE APPLICATION TO USE THE COUNTRIES DEFINED IN YOUR COMMERCETOOLS PROJECT!
# In case you want to replace them, enter the list of countries as ISO country codes (e.g. DE). Default country first.
#application.countries = ["DE", "US", "GB", "AT", "CH"]
application.countries = ${?COUNTRIES}

# LEAVE COMMENTED IF YOU WANT THE APPLICATION TO USE THE CURRENCIES DEFINED IN YOUR COMMERCETOOLS PROJECT!
# In case you want to replace them, enter the list of currencies as ISO currency codes (e.g. EUR). Default currency first.
#application.currencies = ["EUR", "USD"]
application.currencies = ${?CURRENCIES}

# LEAVE COMMENTED IF YOU WANT THE APPLICATION TO USE THE LANGUAGES DEFINED IN YOUR COMMERCETOOLS PROJECT!
# In case you want to replace them, enter the list of languages as language tags (e.g. en-UK). Default language first.
#application.i18n.languages = ["en", "de", "es"]
application.i18n.languages = ${?LANGUAGES}

# List of i18n bundles to load.
application.i18n.bundles = ["sunrise", "modal-announce", "main", "banner", "catalog", "checkout", "my-account-login", "my-account"]

# If you want to change the way i18n messages are resolved, you can change the list of resolver loaders you want to use.
# Keep in mind that the list order determines the order in which the resolvers are going to be invoked for each message.
application.i18n.resolverLoaders = [
  {
    "type": "yaml",
    "path": "i18n"
  },
  {
    "type": "yaml",
    "path": "META-INF/resources/webjars/i18n"
  }
]


# TEMPLATE ENGINE
# ~~~~~

# If you want to change the way templates sources are loaded, you can change the list of template loaders you want to use.
# Keep in mind that the list order determines the order in which the loaders are going to be invoked.
handlebars.templateLoaders = [
  {
    "type":"classpath",
    "path":"/templates"
  },
  {
    "type":"classpath",
    "path":"/META-INF/resources/webjars/templates"
  }
]

# CMS
# ~~~~~

# List of CMS bundles to load.
# (only if used file-based CMS)
application.cms.i18n.bundles = ["home"]

# If you want to change the way CMS messages are resolved, you can change the list of resolver loaders you want to use.
# Keep in mind that the list order determines the order in which the resolvers are going to be invoked for each message.
# (only if used file-based CMS)
application.cms.i18n.resolverLoaders = [
  {
    "type": "yaml",
    "path": "cms"
  }
]


# BASIC AUTH
# ~~~~~

# LEAVE COMMENTED IF YOU DO NOT WANT TO ENABLE BASIC ACCESS AUTHENTICATION!
# If you only want authorized users to access your website, please enter here the required credentials
# separated by colon ':'. For example, for a username 'john' and password 'secret', enter 'john:secret'.
#application.auth.credentials = "username:password"
application.auth.credentials = ${?BASIC_AUTH_CREDENTIALS}

# Authentication realm that identifies your application. This is only necessary when basic authentication is enabled.
application.auth.realm = "Sunrise Demo"
application.auth.realm = ${?BASIC_AUTH_REALM}


# APPLICATION
# ~~~~~

# Enables metrics for each request with the amount of queries, commands and bytes fetched, as well as the duration.
application.metrics.enabled = true

# Enables a setup wizard that lets you configure the minimum information to run your project.
application.setup.enabled = true

# Displays info about the demo shop.
application.demoInfo.enabled = false


# SECRET KEY
# ~~~~~

# MAKE SURE TO CHANGE FOR PRODUCTION!
# http://www.playframework.com/documentation/latest/ApplicationSecret
# The secret key is used to secure cryptographics functions. Anyone that can get access to the application secret will
# be able to generate any session they please, effectively allowing them to log in to your system as any user they please.
# If you deploy your application to several instances be sure to use the same key.
play.crypto.secret="changeme"
play.crypto.secret=${?APPLICATION_SECRET}


# INJECTION
# ~~~~~
play.application.loader = "com.commercetools.sunrise.play.inject.SunriseGuiceApplicationLoader"
play.http.filters = "com.commercetools.sunrise.play.http.SunriseHttpFilters"
play.http.errorHandler = "com.commercetools.sunrise.play.http.SunriseDefaultHttpErrorHandler"

play.modules.enabled += "com.commercetools.sunrise.common.contexts.RequestScopeModule"
play.modules.enabled += "com.commercetools.sunrise.common.contexts.ContextDataModule"
play.modules.enabled += "com.commercetools.sunrise.common.basicauth.BasicAuthModule"
play.modules.enabled += "com.commercetools.sunrise.common.ctp.CtpModule"
play.modules.enabled += "com.commercetools.sunrise.common.template.TemplateModule"
play.modules.enabled += "com.commercetools.sunrise.common.categorytree.CategoryTreeModule"
play.modules.enabled += "com.commercetools.sunrise.productcatalog.productoverview.search.SearchModule"
play.modules.enabled += "com.commercetools.sunrise.common.suggestion.ProductRecommendationModule"
play.modules.enabled += "com.commercetools.sunrise.common.pages.FrameworkPageModule"
play.modules.enabled += "routing.ReverseRouterModule"
play.modules.enabled += "payments.PaymentsModule"

include "dev"